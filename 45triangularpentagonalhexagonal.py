#!/usr/bin/python
#coding:utf-8

"""
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
    Triangle        Tn=n(n+1)/2         1, 3, 6, 10, 15, ...
    Pentagonal      Pn=n(3n−1)/2        1, 5, 12, 22, 35, ...
    Hexagonal       Hn=n(2n−1)      1, 6, 15, 28, 45, ...

    It can be verified that T285 = P165 = H143 = 40755.

    Find the next triangle number that is also pentagonal and hexagonal.

"""

class numfunc(object):
    """
    Just an object that combines a number and a function.
    """
    def __init__(self, index, func):
        self.i = index
        self.func = func
        self.num = self.func(self.i)
    def val(self):
        return self.num
    def update(self):
        self.i+=1
        self.num = self.func(self.i)
    def __repr__(self):
        if (self.func == triangle):
            return "triangle: {} -- {}".format(self.i, self.num)
        elif (self.func == pentagonal):
            return "pentagonal: {} -- {}".format(self.i, self.num)
        else:
            return "hexagonal: {} -- {}".format(self.i, self.num)

#------
#the functions

def triangle(x):
    x = int(x)
    return x*(x+1)/2

def pentagonal(x):
    x = int(x)
    return x*(3*x-1)/2

def hexagonal(x):
    x = int(x)
    return x*(2*x-1)

values = [numfunc(286,triangle), numfunc(165,pentagonal), numfunc(143,hexagonal)]

def end():
    #returns true if all numfuncs in values have the same value
    val = values[0].val()
    for v in values:
        if v.val() != val:
            return False
    return True

while not end():
    #select the function with smallest current value and increase it
    min(values, key=lambda x: x.val()).update()

for v in values:
    print v

